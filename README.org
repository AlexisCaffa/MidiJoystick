** Midijoystick


 MidiJoystick is a JackClient which lets you use your joystick as a midicontroller.

 You can map all axes and buttons to diffrent midi commands and channels.
 
 I admit not every configuration is usefull. But here are some ideas how to configure your joystick:
 * map all axes to Pitch Bend and Continous Controller
 * map your buttons to different Patch Change commands

 MidiJoystick uses a configuration file to read your input mapping, syntax is described further down.
 You'll need to know the index of each of your inputs (axes and buttons) which you can test with 
 the program [[http://linux.die.net/man/1/jstest][jstest]].
 
 On start 'midijoystick' will parse your configuration file, telling you about problematic lines 
 and the mapping between midi command and input.

 When you just want to check or get your current configuration file explained, you can use the 
 included tool 'explain_config'.
  

 Currently joystick device file and configuration is hardcoded as:

 | input file    | path           |
 |---------------+----------------|
 | joystick      | /dev/input/js0 |
 | configuration | ./input.conf   |

* Configuration Syntax


~((t i) CMD (CH PARAM))~

| token | note                                                                                                                                                  | values      |
|-------+-------------------------------------------------------------------------------------------------------------------------------------------------------+-------------|
| t     | specifies input type: a or A for axis; b or B for buttons                                                                                             | [aAbB]      |
| i     | specifies index of the input type (as decimal)                                                                                                        | [0-9]+      |
| CMD   | Midi command identifier as two digit hex number (see table below)                                                                                     | 0x80 - 0xF0 |
| CH    | Midi channel for the command as a two digit hex number (0x00 - > 0x0F) so 0x00 is Channel 1                                                           | 0x00 - 0x0F |
| PARAM | optional parameter as a two digit hex number (0x00 -> 0x7F),  defaults to 0x00 meaning of parameter is specific to the midi command (see table below) | 0x00 - 0x7F |
|       |                                                                                                                                                       |             |

 see [[./input.conf][supplied configuration file]] for an example 

* MidiCommands (general)

 
 List of Midi Commands and their implementation status.

 See also this  [[http://nickfever.com/music/midi-cc-list][List of Continous Controller IDs]]


 Warning: Notes triggered with command 0x90 (Note-on) are not released.
 

 | Command | Meaning                | # parameters | param 1      | param 2          | configuration param                                    | implemented |
 |---------+------------------------+--------------+--------------+------------------+--------------------------------------------------------+-------------|
 |    0x80 | Note-off               |            2 | note         | velocity         |                                                        | no          |
 |    0x90 | Note-on                |            2 | note         | velocity         | note for input center position (defaults to note 0x40) | poorly      |
 |    0xA0 | Aftertouch             |            2 | note         | touch            |                                                        | no          |
 |    0xB0 | Continous Controller   |            2 | controller # | controller value | controller #                                           | yes         |
 |    0xC0 | Patch Change           |            1 | instrument # |                  | patch number                                           | yes         |
 |    0xD0 | Channel Pressure       |            1 | pressure     |                  | not used                                               | yes         |
 |    0xE0 | Pitch Bend             |            2 | lsb (7bits)  | msb (7bits)      | not used                                               | yes         |
 |    0xF0 | (non-musical commands) |              |              |                  |                                                        | no          |


* To Implement

- TODO SysEx messages support
- TODO bind multiple midi commands to one input (should result in better support for 0x80 / 0x90 )
- TODO allow to give joystick / configuration as commandline arguments



* How to build

 ~$ make all~

 will build:
 - midijoystick:    main program
 - explain_config:  tool for configuration checking
 - config.pdf:      nice picture of configuration parser statemachine

 Dependencies:
 - jackaudioserver
 - ragel
 
 Optional dependencies:
 - graphwiz
 
 
 Configuration parsing is made with [[http://www.colm.net/open-source/ragel/][Ragel]] (a state machine compiler).
 Ragel compiles to a regular c source code file but can generate *.dot files for [[http://www.graphviz.org/][Graphviz]] too.
 The output files of Ragel are included in this repository, so you shouldn't need it.
 

* Additional Notes

 The joystick api maps axes values to a int16_t (positive and negative) range. While midi data bytes range from 0x00 to 0x7F.
 So we're mapping the axis values to uint16_t and then to the midi data range (0x00 - 0x7F), thus a axis value of 0x00 is a midi
 value of 0x40. An axis value of 0x00 occures when the axis controler is at center position.

 Buttons emit midi values of 0x7F when pressed and 0x00 when released, so their usefullness is subpar as for example
 mapping a button to Note-on would make not much sense.
 

* Source Code Map

  currently midijoystick.o gets created by copying main.o , that's ugly and i should change that 

 | file(s)               | comments                                               |
 |-----------------------+--------------------------------------------------------|
 | explain_config.c      | tool to check configuration                            |
 | main.c                | main program                                           |
 | config.{rl,c,dot,pdf} | all about configuration file parsing                   |
 | joystick.{c,h}        | for talking with the joystick device file              |
 | midijack.{c,h}        | for talking with jackaudio server                      |
 | midiprotocol.{c,h}    | this knows how midi msgs look like on the nibble level |
 | mapping.{c,h}         | glue code between midiprotocol and config              |

