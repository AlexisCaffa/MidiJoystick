* Midijoystick


 MidiJoystick is a jackaudio client for Linux (and maybe other unixlikes) which lets you use your joystick as a midicontroller.

 You can map all axes and buttons to diffrent midi commands and channels.
 
 I admit not every configuration is usefull. But here are some ideas how to configure your joystick:
 * map all axes to Pitch Bend and Continous Controller
 * map your buttons to some of the generic switches (see CC IDs)

 MidiJoystick uses a configuration file to read your input mapping, syntax is described further down.
 You'll need to know the index of each of your inputs (axes and buttons) which you can test with 
 the program [[http://linux.die.net/man/1/jstest][jstest]].
 
 On start 'midijoystick' will parse your configuration file, telling you about problematic lines 
 and the mapping between midi command and input.

 When you just want to check or get your current configuration file explained, you can use the 
 included tool 'explain_config'.
  
 
 'midijoystick' will never check if your configuration makes sense on midi level. If you want to Pitch Bend with a button, you can do it.
 If you want to use CC 0x43 (Soft Pedal) with an axis, you can do it.
 

 Currently joystick device file and configuration is hardcoded as:

 | input file    | path           |
 |---------------+----------------|
 | joystick      | /dev/input/js0 |
 | configuration | ./input.conf   |

** Configuration Syntax


   ~((t i) (CMD CH PARAM));~

 Every configuration entry has to be delimited by ';'.
 
 A configuration entry can be split to multiple lines:

#+BEGIN_SRC lisp
 ((t i) 
        (CMD 
             CH PARAM));
#+END_SRC

 Any line containing a '#' is discarded as comment by the configuration parser.
 Comments have to be on their own line, but can appear in their own line between a configuration entry:


#+BEGIN_SRC lisp
 ((t i) 
 # A nice comment 
        (CMD 
             CH PARAM));
#+END_SRC



| token | note                                                                                                                                                  | values      |
|-------+-------------------------------------------------------------------------------------------------------------------------------------------------------+-------------|
| t     | specifies input type: a or A for axis; b or B for buttons                                                                                             | [aAbB]      |
| i     | specifies index of the input type (as decimal)                                                                                                        | [0-9]+      |
| CMD   | Midi command identifier as two digit hex number (see table below)                                                                                     | 0x80 - 0xF0 |
| CH    | Midi channel for the command as a two digit hex number (0x00 - > 0x0F) so 0x00 is Channel 1                                                           | 0x00 - 0x0F |
| PARAM | optional parameter as a two digit hex number (0x00 -> 0x7F),  defaults to 0x00 meaning of parameter is specific to the midi command (see table below) | 0x00 - 0x7F |
| ;     | Configuration seperator                                                                                                                               |             |
| #     | indicates a Comment                                                                                                                                   |             |

 see [[./input.conf][supplied configuration file]] for an example 

** MidiCommands (general)

  
 List of Midi Commands and their implementation status.

 Sources:
 - [[http://www.indiana.edu/~emusic/etext/MIDI/chapter3_MIDI.shtml][Introduction to Computer Music: Volume One ; Chapter 3: Midi]]
 - [[http://nickfever.com/music/midi-cc-list][List of Continous Controller IDs]]
 - [[www.2writers.com/eddie/MidiGlossary.htm][MIDI Glossary]]


 Warning: Notes triggered with command 0x90 (Note-on) are not released.
 

 | Command | Meaning                | # parameters | param 1      | param 2          | configuration param                                    | implemented |
 |---------+------------------------+--------------+--------------+------------------+--------------------------------------------------------+-------------|
 |    0x80 | Note-off               |            2 | note         | velocity         |                                                        | no          |
 |    0x90 | Note-on                |            2 | note         | velocity         | note for input center position (defaults to note 0x40) | poorly      |
 |    0xA0 | Aftertouch             |            2 | note         | touch            |                                                        | no          |
 |    0xB0 | Continous Controller   |            2 | controller # | controller value | controller #                                           | yes         |
 |    0xC0 | Patch Change           |            1 | instrument # |                  | patch number                                           | yes         |
 |    0xD0 | Channel Pressure       |            1 | pressure     |                  | not used                                               | yes         |
 |    0xE0 | Pitch Bend             |            2 | lsb (7bits)  | msb (7bits)      | not used                                               | yes         |
 |    0xF0 | (non-musical commands) |              |              |                  |                                                        | no          |


*** Loved CC IDs

 See your synths manual for specific implementation details.
 CC IDs which are marked as "switch" are best mapped to buttons.
 
 Currently not all mappings are usefull, due to the fact that Commands can only take one parameter.

 e.g.: 

 - Mapping 0x00 to an axis would make it hard to select a bank
 - Mapping 0x00 to an button would switch between bank 0x7F on press and 0x00 on release
 - Mapping 0x08 could be usefull to map to a axis but not as much when mapped to a button
 - etc...


 |          ID | comment                                                      | switch | "Channel Mode" |
 |-------------+--------------------------------------------------------------+--------+----------------|
 |-------------+--------------------------------------------------------------+--------+----------------|
 |        0x00 | Bank Select                                                  |        |                |
 |        0x01 | Modulation                                                   |        |                |
 |        0x02 | Breath Controller                                            |        |                |
 |-------------+--------------------------------------------------------------+--------+----------------|
 |        0x04 | Foot Controller                                              |        |                |
 |        0x05 | Portamento Time                                              |        |                |
 |        0x06 | Data Entry MSB (controls values for [N]RPN parameters)       |        |                |
 |        0x07 | Volume (Channel)                                             |        |                |
 |        0x08 | Balance (0x00 = hard left, 0x40 = center, 0x7F = hard right) |        |                |
 |-------------+--------------------------------------------------------------+--------+----------------|
 |        0x0A | Pan (0x00 = hard left, 0x40 = center, 0x7F = hard right)     |        |                |
 |        0x0B | Expression                                                   |        |                |
 |        0x0C | Effect Controller 1                                          |        |                |
 |        0x0D | Effect Controller 2                                          |        |                |
 |-------------+--------------------------------------------------------------+--------+----------------|
 | 0x10 - 0x13 | General Purpose                                              |        |                |
 |-------------+--------------------------------------------------------------+--------+----------------|
 | 0x20 - 0x3F | Controller 0 - 31 LSB (fine tune CC 0x00 - 0x1F)             |        |                |
 |        0x40 | Damper/Sustain Pedal (0x00 - 0x3F: OFF; 0x40 - 0x7F: ON)     | *      |                |
 |        0x41 | Portamento           (0x00 - 0x3F: OFF; 0x40 - 0x7F: ON)     | *      |                |
 |        0x42 | Sostenuto            (0x00 - 0x3F: OFF; 0x40 - 0x7F: ON)     | *      |                |
 |        0x43 | Soft Pedal           (0x00 - 0x3F: OFF; 0x40 - 0x7F: ON)     | *      |                |
 |        0x44 | Legato Foot Switch   (0x00 - 0x3F: OFF; 0x40 - 0x7F: ON)     | *      |                |
 |        0x45 | Hold 2                                                       |        |                |
 |        0x46 | Sound Controller 1 (default = variation)                     |        |                |
 |        0x47 | Sound Controller 2 (default = VCF resonance)                 |        |                |
 |        0x48 | Sound Controller 3 (default = VCA release time)              |        |                |
 |        0x49 | Sound Controller 4 (default = attack                         |        |                |
 |        0x4A | Sound Controller 5 (default = VCF cutoff)                    |        |                |
 | 0x4B - 0x4F | Sound Controller 6 - 10  generic                             |        |                |
 | 0x50 - 0x53 | Generic Switch       (0x00 - 0x3F: OFF; 0x40 - 0x7F: ON)     | *      |                |
 |        0x54 | Portamento amount                                            |        |                |
 |-------------+--------------------------------------------------------------+--------+----------------|
 | 0x5B - 0x5F | Effect Depth 1 - 5                                           |        |                |
 |        0x60 | Increment Data (for [N]RPN messages)                         |        |                |
 |        0x61 | Decrement Data (for [N]RPN messages                          |        |                |
 |        0x62 | Selects LSB NPRN parameter (0x06, 0x26, 0x60, 0x61)          |        |                |
 |        0x63 | Selects MSB NPRN parameter (0x06, 0x26, 0x60, 0x61)          |        |                |
 |        0x64 | Selects LSB  PRN parameter (0x06, 0x26, 0x60, 0x61)          |        |                |
 |        0x65 | Selects MSB  PRN parameter (0x06, 0x26, 0x60, 0x61)          |        |                |
 |-------------+--------------------------------------------------------------+--------+----------------|
 |        0x78 | Mutes all sounding notes (ignore sustain / release)          |        | *              |
 |        0x79 | Resets all controllers to default                            |        | *              |
 |        0x7A | Local On/Off                                                 | *      | *              |
 |        0x7B | Mutes all sounding notes (respects sustain / release)        |        | *              |
 |        0x7C | Omni Mode OFF                                                |        | *              |
 |        0x7D | Omni Mode On                                                 |        | *              |
 |        0x7E | Mono Mode                                                    |        | *              |
 |        0x7F | Poly Mode                                                    |        | *              |

 Undefined MIDI CCs:

 These CC IDs are not defined, but may be used by your synth. See your manual as always.
 
 0x03; 0x09; 0x0E; 0x0F; 0x14 - 0x1F; 0x55 - 0x5C; 0x66 - 0x77;
 

*** System Commands

**** System Common Commands

 Currently there are no plans to support System Common Commands (not including 0xF7 aka EOX aka End of system exclusive message).

**** System Realtime Commands (NOT YET SUPPORTED)

 |  CMD | Description                                 | gona implement? |
 |------+---------------------------------------------+-----------------|
 | 0xF8 | Timing Clock                                | nope            |
 | 0xFA | Start (from beginning of song)              | yup             |
 | 0xFB | Continue (from current position)            | yup             |
 | 0xFC | Stop                                        | yup             |
 | 0xFE | Active Sensing                              | nope            |
 | 0xFF | Systen Reset (back to state after power on) | yup             |
 
 configuration example:

 System reset on button 1
 ~((b 1) (0xFF))~

**** SysEx Commands (NOT YET SUPPORTED)

 Structure of System Exclusive Commands on byte level.

 Please consult your synths manual for more information.
 
***** General Format:
 
 |    0 |  1 | 2 ...n -1          |    n |
 |------+----+--------------------+------|
 | 0xF0 | ID | data (0x00 - 0x7F) | 0xF7 |


***** MIDI Universal System Exclusive Messages

 Format:
 ~0xF0 0x7E <Device-ID> <Sub-ID#1> [<Sub-ID#2> [<parameters>]] 0xF7~

***** Midi Real-Time Universal System Exclusive Messages [ Midi Machine Control (MMC)]

 

 Format:
 ~0xF0 0x7F <Device-ID> <Sub-ID#1> [<Sub-ID#2> [<parameters>]] 0xF7~
      

 Example:

 ~0xF0 0x7F 0x7F 0x06 0x1 0xF7~    send play to all devices

 | token      | comment                                             |
 |------------+-----------------------------------------------------|
 | Device-ID  | MMC device's ID# (0x00 - 0x7F ; 0x7F = all devices) |
 | Sub-ID#1   | Commandgroup                                        |
 | Sub-ID#2   | exact Command                                       |
 | parameters | parameters for exact command                        |

 | Sub-ID#1 | comment                       | MMC related |
 |----------+-------------------------------+-------------|
 |     0x01 | Long Form MTC                 |             |
 |     0x02 | Midi Show Control             |             |
 |     0x03 | Notation Informataion         |             |
 |     0x04 | Device Control                |             |
 |     0x05 | Real Time MTC Cueing          |             |
 |     0x06 | MIDI Machine Control Command  | *           |
 |     0x07 | Midi Machine Control Response | *           |
 |     0x08 | Single Note Retune            |             |
      
 | Sub-ID#1 | Sub-ID#2 | comment                                           | parameters                                                        |
 |----------+----------+---------------------------------------------------+-------------------------------------------------------------------|
 |     0x06 |     0x01 | Stop                                              |                                                                   |
 |          |     0x02 | Play                                              |                                                                   |
 |          |     0x03 | Deferred Play (play after no longer busy)         |                                                                   |
 |          |     0x04 | Fast Forward                                      |                                                                   |
 |          |     0x05 | Rewind                                            |                                                                   |
 |          |     0x06 | Record Strobe (AKA Punch In)                      |                                                                   |
 |          |     0x07 | Record Exit (AKA Punch Out)                       |                                                                   |
 |          |     0x08 | Record Pause                                      |                                                                   |
 |          |     0x0A | Eject (disengage media container from MMC device) |                                                                   |
 |          |     0x0B | Chase                                             |                                                                   |
 |          |     0x0D | MMC Reset (to default/startup state)              |                                                                   |
 |          |     0x40 | Write (AKA Record ready, AKA Arm Tracks)          | <length1> 0x4F <length2> <track-bitmap-type>                      |
 |          |     0x44 | GoTo (AKA Locate)                                 | <length>=0x06 01 <hours> <minutes> <seconds> <frames> <subframes> |
 |          |     0x47 | Shuttle                                           | <length>=0x03 <sh> <sm> <sl> (MIDI Standard Speed codes)          |
 |          |          |                                                   |                                                                   |
 |     0x07 |     0xXX | response state                                    | values detailing response state                                   |

***** Roland:
 
 |    0 |              1 |         2 |        3 |                            4 | 5 ...7     | 8 ... n -2                   | n -1     |    n |
 |------+----------------+-----------+----------+------------------------------+------------+------------------------------+----------+------|
 | 0xF0 | manufacture id | device id | model id | 0x12 (send) / 0x11 (receive) | start addr | data (send) / size (receive) | checksum | 0xF7 |
 |      |                |           |          |                              |            |                              |          |      |
 
 Calculating Roland checksum:

#+BEGIN_SRC python
  ck_sum = 0
  for byte in sysex:
      ck_sum += byte
      ck_sum = ck_sum % 128
  ck_sum = 128 - ck_sum
#+END_SRC

** TODOs

- TODO Support System Realtime Messages (Start, Stop, Reset )
- TODO SysEx messages support (eg: support bigger parameters)
- TODO bind multiple midi commands to one input (should result in better support for 0x80 / 0x90 )
- TODO allow to give joystick / configuration as commandline arguments
- TODO allow to configure midi value emitted when button is pressed (instead of hardcoded 0x7F)
- TODO allow to configure deadzone per axis (instead of hardcoded -/+4000)
- TODO allow to configure max values per axis (e.g. clip on -/+6000)
- TODO _maybe_ find a way to configure buttons as mod keys for axis events (e.g. axis mapped to Pitch Bend, hold a button and axis now emits CC )



** How to build

 ~$ make all~

 will build:
 - midijoystick:    main program
 - explain_config:  tool for configuration checking
 - config.pdf:      nice picture of configuration parser statemachine

 Dependencies:
 - jackaudioserver
 - ragel
 
 Optional dependencies:
 - graphwiz
 
 
 Configuration parsing is made with [[http://www.colm.net/open-source/ragel/][Ragel]] (a state machine compiler).
 Ragel compiles to a regular c source code file but can generate *.dot files for [[http://www.graphviz.org/][Graphviz]] too.
 The output files of Ragel are included in this repository, so you shouldn't need it.
 

** Additional Notes

 The joystick api maps axes values to a int16_t (positive and negative) range. While midi data bytes range from 0x00 to 0x7F.
 So we're mapping the axis values to uint16_t and then to the midi data range (0x00 - 0x7F), thus a axis value of 0x00 is a midi
 value of 0x40. An axis value of 0x00 occures when the axis controler is at center position.

 Buttons emit midi values of 0x7F when pressed and 0x00 when released, so their usefullness is subpar as for example
 mapping a button to Note-on would make not much sense.
 

** Source Code Map

  currently midijoystick.o gets created by copying main.o , that's ugly and i should change that 

 | file(s)               | comments                                               |
 |-----------------------+--------------------------------------------------------|
 | explain_config.c      | tool to check configuration                            |
 | main.c                | main program                                           |
 | config.{rl,c,dot,pdf} | all about configuration file parsing                   |
 | joystick.{c,h}        | for talking with the joystick device file              |
 | midijack.{c,h}        | for talking with jackaudio server                      |
 | midiprotocol.{c,h}    | this knows how midi msgs look like on the nibble level |
 | mapping.{c,h}         | glue code between midiprotocol and config              |


** minor thoughts

 - One design goal is to minimize heap allocation


** License

   [[./LICENSE][MIT]]
