* Midijoystick


 MidiJoystick is a jackaudio client for Linux (and maybe other unixlikes) which lets you use your joystick as a midicontroller.

 You can map all axes and buttons to diffrent midi commands and channels.
 
 I admit not every configuration is usefull. But here are some ideas how to configure your joystick:
 * map all axes to Pitch Bend and Continous Controller
 * map your buttons to some of the generic switches (see CC IDs)
 * or see [[./input.conf][supplied configuration file]] for an example

 MidiJoystick uses a configuration file to read your input mapping, syntax is described further down.
 You'll need to know the index of each of your inputs (axes and buttons) which you can test with 
 the program [[http://linux.die.net/man/1/jstest][jstest]].
 
 On start 'midijoystick' will parse your configuration file, telling you about problematic lines 
 and the mapping between midi command and input.

 When you just want to check or get your current configuration file explained, you can use the 
 included tool 'explain_config'.
  
 
 'midijoystick' will never check if your configuration makes sense on midi level. If you want to Pitch Bend with a button, you can do it.
 If you want to use CC 0x43 (Soft Pedal) with an axis, you can do it.
 

 Currently joystick device file and configuration is hardcoded as:

 | input file    | path           |
 |---------------+----------------|
 | joystick      | /dev/input/js0 |
 | configuration | ./input.conf   |

 If you need help on MIDI see the included [[./midicompendium.org][MIDI Compendium]].

** Configuration Syntax


 Configuration entry:
 
   ~((t i) (CMD CH PARAM));~

 Configuration entry with ommitted 'PARAM' (in this case 'PARAM' defaults to 0x00)

   ~((t i) (CMD CH));~

 Every configuration entry has to be delimited by ';'.
 
 A configuration entry can be split to multiple lines:

#+BEGIN_SRC lisp
 ((t i) 
        (CMD 
             CH PARAM));
#+END_SRC

 Any line containing a '#' is discarded as comment by the configuration parser.
 Comments have to be on their own line, but can appear in their own line between a configuration entry:


#+BEGIN_SRC lisp
 ((t i) 
 # A nice comment 
        (CMD 
             CH PARAM));
#+END_SRC



| token | note                                                                                                                                                  | values                |
|-------+-------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------|
| t     | specifies input type: a or A for axis; b or B for buttons                                                                                             | [aAbB]                |
| i     | specifies index of the input type (as decimal)                                                                                                        | [0-9]+                |
| CMD   | Midi command identifier as two digit hex number (see table below)                                                                                     | 0[xX][89a-fA-F]0      |
| CH    | Midi channel for the command as a two digit hex number (0x00 - > 0x0F) so 0x00 is Channel 1                                                           | 0[xX]0[0-9a-fA-F]     |
| PARAM | optional parameter as a two digit hex number (0x00 -> 0x7F),  defaults to 0x00 meaning of parameter is specific to the midi command (see table below) | 0[xX][0-7][0-9a-fA-F] |
| ;     | Configuration entry seperator                                                                                                                         |                       |
| #     | indicates a Comment                                                                                                                                   |                       |

 see [[./input.conf][supplied configuration file]] for an example 

** Implemented Midi Commands

 Warning: Notes triggered with command 0x90 (Note-on) are not released.


 | Command | Meaning                   | joystick read value | config                     | comment                                    |
 |---------+---------------------------+---------------------+----------------------------+--------------------------------------------|
 |    0x90 | Note-on                   | note                | sets note for input center | default note 0x40 (note value: E4)         |
 |    0xB0 | Continous Controller (CC) | controller value    | CC ID                      | see table of CC IDs in the [[./midicompendium.org][MIDI Compendium]] |
 |    0xC0 | Patch Change              | not used            | patch number               |                                            |
 |    0xD0 | Channel Pressure          | pressure amount     | not used                   |                                            |
 |    0xE0 | Pitch Bend                | bend amount         | not used                   |                                            |
 |         |                           |                     |                            |                                            |

 For further information see the included [[./midicompendium.org][MIDI Compendium]]

** [[./midicompendium.org][MIDI Compendium]]

** TODOs

   
- TODO Support System Realtime Messages (Start, Stop, Reset )
- TODO SysEx messages support (eg: support bigger parameters)
- TODO bind multiple midi commands to one input (should result in better support for 0x80 / 0x90 )
- TODO allow to give joystick / configuration as commandline arguments
- TODO allow to configure midi value emitted when button is pressed (instead of hardcoded 0x7F)
- TODO allow to configure deadzone per axis (instead of hardcoded -/+4000)
- TODO allow to configure max values per axis (e.g. clip on -/+6000)
- TODO _maybe_ find a way to configure buttons as mod keys for axis events (e.g. axis mapped to Pitch Bend, hold a button and axis now emits CC )



** How to build

 ~$ make all~

 will build:
 - midijoystick:    main program
 - explain_config:  tool for configuration checking
 - config.pdf:      nice picture of configuration parser statemachine

 Dependencies:
 - jackaudioserver
 - ragel
 
 Optional dependencies:
 - graphwiz
 
 
 Configuration parsing is made with [[http://www.colm.net/open-source/ragel/][Ragel]] (a state machine compiler).
 Ragel compiles to a regular c source code file but can generate *.dot files for [[http://www.graphviz.org/][Graphviz]] too.
 The output files of Ragel are included in this repository, so you shouldn't need it.
 

** Additional Notes

 The joystick api maps axes values to a int16_t (positive and negative) range. While midi data bytes range from 0x00 to 0x7F.
 So we're mapping the axis values to uint16_t and then to the midi data range (0x00 - 0x7F), thus a axis value of 0x00 is a midi
 value of 0x40. An axis value of 0x00 occures when the axis controler is at center position.

 Buttons emit midi values of 0x7F when pressed and 0x00 when released, so their usefullness is subpar as for example
 mapping a button to Note-on would make not much sense.
 

** Source Code Map

  currently midijoystick.o gets created by copying main.o , that's ugly and i should change that 

 | file(s)               | comments                                               |
 |-----------------------+--------------------------------------------------------|
 | explain_config.c      | tool to check configuration                            |
 | main.c                | main program                                           |
 | config.{rl,c,dot,pdf} | all about configuration file parsing                   |
 | joystick.{c,h}        | for talking with the joystick device file              |
 | midijack.{c,h}        | for talking with jackaudio server                      |
 | midiprotocol.{c,h}    | this knows how midi msgs look like on the nibble level |
 | mapping.{c,h}         | glue code between midiprotocol and config              |


** minor thoughts

 - One design goal is to minimize heap allocation


** License

   [[./LICENSE][MIT]]
